Time = require("./Time.js");
Mass = require("./Mass.js");
Prefix = require("./Prefix.js");
Length = require("./Length.js");
SI = require("./SI.js");
Unit = Prefix.prototype;


let fullList = [ Time, Mass, Length ];
let encodeSymbol = function( postfix ) {
    let res, fp, sp, newPostfix;

    // check prefix and SI
    res = Unit.startWith( postfix, Prefix );
    fp = res[0] ?? Prefix.bySymbols.u; newPostfix = res[1];
    res = Unit.startWith( newPostfix, SI );
    sp = res[0]; newPostfix = res[1];

    if( sp != undefined && newPostfix === '' ) {
        return [ fp, sp ];
    }
    
    // check only prefix
    if( sp === undefined && newPostfix === '' ) {
        return [ fp ];
    }

    // check SI without prefix
    fp = Prefix.bySymbols.u;
    res = Unit.startWith( postfix, SI );
    sp = res[0]; newPostfix = res[1];

    if( sp != undefined && newPostfix === '' ) {
        return [ fp, sp ];
    }

    // check anther variations
    res = Unit.startWith( postfix, fullList );
    fp = res[0]; newPostfix = res[1];

    return [fp];
};

let encodePostfix = function( postfix ) {
    let posStart=0, posEnd=0, isNum=false, res=[];
    for(let i=0; i<postfix.length; i++) {
        let char = postfix.charCodeAt( i );
        console.log( postfix[i] );
        switch (char) {
            case 42: case 47: // *, /
                if( isNum ) {
                    res.push( postfix.slice(posStart, posEnd) );
                } else {
                    res.push( encodeSymbol(postfix.slice(posStart, posEnd)) );
                }
                res.push( postfix[i] );
                isNum = true;
                posEnd++;
                posStart = posEnd;
                console.log( `posStart: ${posStart}; posEnd: ${posEnd}` );
                break;
            case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:
                if( !isNum ) { 
                    res.push( encodeSymbol(postfix.slice(posStart, posEnd)) );
                    posStart = posEnd;
                    isNum = true;
                }
                posEnd++;
                console.log( `posStart: ${posStart}; posEnd: ${posEnd}` );
                break;
            default:
                if( isNum ) {
                    res.push( postfix.slice(posStart, posEnd) );
                    posStart = posEnd;
                    isNum = false;
                }
                posEnd++;
                console.log( `posStart: ${posStart}; posEnd: ${posEnd}` );
                break;
        }
    }
    if( posStart != posEnd ) {
        if( isNum ) {
            res.push( postfix.slice(posStart, posEnd) );
        } else {
            res.push( encodeSymbol(postfix.slice(posStart, posEnd)) );
        }
    }
    console.log( res );
    return res;
};

encodePostfix( 'km' );
encodePostfix( 'm' );
encodePostfix( 'dam' );
encodePostfix( 'kilom' );
encodePostfix( 'kkilom' );
encodePostfix( 'k' );
encodePostfix( 't' );
encodePostfix( 'km/s' );
encodePostfix( 'km/s2' );
encodePostfix( 'km3/s2' );
encodePostfix( 'km3/2' );
encodePostfix( 'ks' );

