
const SimpleTest = require( '../../simple-test' );

let createCompile = require('../../../core/parser/transform');
let compile = createCompile({
    all: false,
    'math-to-obj': true,
});


const coreTest = new SimpleTest( 'Базовая функциональность модуля parser/transform/transform-math-operators' );
{
    // options
    const testTittle = "Работа с пустым скриптом";
    const acornOptions = {ecmaVersion: 2020};
    // processing data
    function processData() {
        let inputCode = ``;
        let outputCode = compile( inputCode );
        return outputCode;
    };
    // expected result
    function expectedRes() {
        let itCode = ``;
        return itCode;
    }
    // compare
    coreTest.it(
        testTittle,
        processData,
        expectedRes,
    );
}

{
    // options
    const testTittle = "Работа с операциями над объеками";
    const acornOgptions = {ecmaVersion: 2020};
    // processing data
    function processData() {
        let inputCode = `
        let res = Obj ** key + alpha / beta;`;
        let outputCode = compile( inputCode );
        return outputCode;
    };
    // expected result
    function expectedRes() {
        let itCode = `
        let res = Obj.__pow__(key).__add__(alpha.__div__(beta));`;
        return itCode;
    }
    // compare
    coreTest.it(
        testTittle,
        processData,
        expectedRes,
    );
}

{
    // options
    const testTittle = "Работа объектов с операциями типа +=, -=, ...";
    const acornOgptions = {ecmaVersion: 2020};
    // processing data
    function processData() {
        let inputCode = `
        let res = 1;
        res += Obj;`;
        let outputCode = compile( inputCode );
        return outputCode;
    };
    // expected result
    function expectedRes() {
        let itCode = `
        let res = 0;
        res.__iadd__(Obj);`;
        return itCode;
    }
    // compare
    coreTest.it(
        testTittle,
        processData,
        expectedRes,
    );
}

{
    // options
    const testTittle = "Работа с операциями над числами";
    const acornOgptions = {ecmaVersion: 2020};
    // processing data
    function processData() {
        let inputCode = `
        let res = 2+3;
        res = res + 10;
        res = 10 - res;`;
        let outputCode = compile( inputCode );
        return outputCode;
    };
    // expected result
    function expectedRes() {
        let itCode = `
        let res = (2 + 3);
        res = res.__add__(10);
        res = res.__rsub__(10);`;
        return itCode;
    }
    // compare
    coreTest.it(
        testTittle,
        processData,
        expectedRes,
    );
}

{
    // options
    const testTittle = "Комбинированный тест"; 
    const acornOptions = {ecmaVersion: 2020};
    // processing data
    function processData() {
        let inputCode = `
        let Obj = new CustomClass();
        let res = Obj ** (Obj + Obj * ~(3+2) )`;
        let outputCode = compile( inputCode );
        return outputCode;
    };
    // expected result
    function expectedRes() {
        let itCode = `
        let Obj = new CustomClass();
        let res = Obj.__pow__(Obj.__add__(Obj.__mul__(SupportBasOp.__not((3 + 2)))))`;
        return itCode;
    }
    // compare
    coreTest.it(
        testTittle,
        processData,
        expectedRes,
    );
}
coreTest.print();
