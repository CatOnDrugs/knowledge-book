
const SimpleTest = require( '../../../simple-test' );
const UnitValue = require('../../../../core/process/physic/unit/core/UnitValue');
const ComplexUnit = require('../../../../core/process/physic/unit/core/ComplexUnit');

const coreTest = new SimpleTest( 'Проверка работы core модулей физических постфиксов. Модуль: core/process/physic/unit/core' );
{
    // options
    const testTittle = "Инициализация для безразмерной величины";
    // processing data
    const value = 12;
    const type  = [];
    function processData() {
        let input  = new ComplexUnit( type );
        let input2 = new UnitValue( value, type );
        return [input, input2];
    };
    // expected result
    function expectedRes() {
        let res = [
            {
                type: new Map()
            },
            {
                value: value,
                type: new Map()
            }
        ];

        return res;
    }
    // compare
    coreTest.it(
        testTittle,
        processData,
        expectedRes,
    );
}


const Length = require('./../../../../core/process/physic/unit/units/Length');
{
    // options
    const testTittle = "Инициализация для длины - м";
    const value = 12;
    const type  = [[Length.bySymbols.m]];
    // processing data
    function processData() {
        let input  = new UnitValue( value, type );
        let input2 = new ComplexUnit( type );
        return [ input, input2 ];
    };
    // expected result
    function expectedRes() {
        let res = [
            {
                value: value,
                type: new Map([[ Length.bySymbols.m[1], 1 ]])
            },
            {
                type: new Map([[ Length.bySymbols.m[1], 1 ]])
            }
        ];
        return res;
    }
    // compare
    coreTest.it(
        testTittle,
        processData,
        expectedRes,
    );
}

{
    // options
    const testTittle = "Перевод в строку";
    const value = 123456;
    const type  = [[Length.bySymbols.m, 2]];
    // processing data
    function processData() {
        let input = new UnitValue( value, type );
        input = input.toString();
        return input;
    };
    // expected result
    function expectedRes() {
        let res = `${value}m2`;
        return res;
    }
    // compare
    coreTest.it(
        testTittle,
        processData,
        expectedRes,
    );
}

{
    // options
    const testTittle = "Приводим простые типы. 20м в км и обратно";
    // processing data
    const value = 20;
    function processData() {
        let val1 = new UnitValue( value, [[Length.bySymbols.km]] );
        let val2 = new UnitValue( value, [[Length.bySymbols.m]] );
        let res;
        res  = val1.typeConversion( val2 ).toString(); // km => m
        res += val2.typeConversion( val1 ).toString(); // m  => km
        return res;
    };
    // expected result
    function expectedRes() {
        let res = "m" + "km";
        return res;
    }
    // compare
    coreTest.it(
        testTittle,
        processData,
        expectedRes,
    );
}

{
    // options
    const testTittle = "Коэффициент перевода 20м в км и 20km в m";
    // processing data
    const value = 20;
    function processData() {
        let val1 = new UnitValue( value, [[Length.bySymbols.km]] );
        let val2 = new UnitValue( value, [[Length.bySymbols.m]] );
        let res;
        res  = [
            val1.typeConversionKoef( val2 ), // km => m
            val2.typeConversionKoef( val1 ), // m  => km
        ];
        console.log( res );
        return res;
    };
    // expected result
    function expectedRes() {
        let res = [ 1000, 0.001 ];
        return res;
    }
    // compare
    coreTest.it(
        testTittle,
        processData,
        expectedRes,
    );
}
coreTest.print();

const transformTest = new SimpleTest( 'Проверка обработчика физических постфиксов. Модуль: core/process/physic/unit' );
transformTest.print();
