acorn = require('acorn');

function wrapperReadNumber( library ) {
    function stringToBigInt(str) {
        if (typeof BigInt !== "function") {
            return null
        }

        // `BigInt(value)` throws syntax error if the string contains numeric separators.
        return BigInt(str.replace(/_/g, ""))
    }

    function stringToNumber(str, isLegacyOctalNumericLiteral) {
        if (isLegacyOctalNumericLiteral) {
            return parseInt(str, 8)
        }

        // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.
        return parseFloat(str.replace(/_/g, ""))
    }

    return function(node, startsWithDot = false) {
        var start = this.pos;
        var end = this.pos;
        switch (this.fullCharCodeAtPos()) {
            case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
                if (!startsWithDot && this.readInt(10, undefined, true) === null) {this.raise(start, "Invalid number");}
                var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
                if (octal && this.strict) {this.raise(start, "Invalid number");}
                var next = this.input.charCodeAt(this.pos);
                if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
                    var val$1 = stringToBigInt(this.input.slice(start, this.pos));
                    ++this.pos;
                    if (library.isIdentifierStart(this.fullCharCodeAtPos())) {this.raise(this.pos, "Identifier directly after number");}
                    return this.finishToken(types$1.num, val$1)
                }
                if (octal && /[89]/.test(this.input.slice(start, this.pos))) {octal = false;}
                if (next === 46 && !octal) { // '.'
                    ++this.pos;
                    this.readInt(10);
                    next = this.input.charCodeAt(this.pos);
                }
                if ((next === 69 || next === 101) && !octal) { // 'eE'
                    next = this.input.charCodeAt(++this.pos);
                    if (next === 43 || next === 45) {++this.pos;} // '+-'
                    if (this.readInt(10) === null) {this.raise(start, "Invalid number");}
                }

                end = this.pos;
                var val = stringToNumber(this.input.slice(start, end), octal);
                if (library.isIdentifierStart(this.fullCharCodeAtPos())) {
                    let postfix = this.readWord1();
                    this.finishToken(acorn.tokTypes.num, val);
                    this.value = { type: "NimericPostfix", value: val, postfix: postfix };
                    return;
                }

                let res = this.finishToken(acorn.tokTypes.num, val);
                return;
        }
    };
};

// acorn.Parser.prototype.readNumber = wrapperReadNumber( acorn );
let updateAcorn = {
    __proto__: acorn.Parser.prototype,
    
    readNumber: wrapperReadNumber( acorn )
};




let acornWalkAST = require('acorn-walkAST');

let UpdateNumericPostfix = {
    __proto__: acornWalkAST.UpdateNodes,

    Literal: function( node ) {
        if( typeof node.value === "object" ) {
            if( node.value.type === "NimericPostfix" ) {
                let newCode = "SupportObjPostfix(" + node.value.value + ", \"" + node.value.postfix + "\")";
                let offset = this.replaceCode( node, newCode );
                return offset;
            }
        }
        console.log( node );
        return 0;
    }
}

// function compile( code, acornOptions = {ecmaVersion: 2020} ) {
//     let AST = acorn.parse(code, acornOptions);
//     // console.log( AST.body[0].body );
//     return acornWalkAST.compile( code, AST, UpdateNumericPostfix );
// };

module.exports = {
    acorn: updateAcorn,
    walkAST: acornWalkAST,
    // compile: compile,
};


