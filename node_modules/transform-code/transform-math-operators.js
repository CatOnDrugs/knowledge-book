function updateAcorn( acorn ) {
    return acorn;
}



function updateWalkAST( walkAST ) {
    let UpdateNodes = { __proto__: walkAST.UpdateNodes };

    walkAST.ReplaceOperatorFunction = {

        BinaryOperators: {
            "<":   "__lt_",
            ">":   "__gt_",
            "+":   "__add__",
            "-":   "__sub__",
            "*":   "__mul__",
            "/":   "__div__",
            "%":   "__mod__",
            "**":  "__pow__",
            "&":   "__and__",
            "|":   "__or__",
            "^":   "__xor__",
            "<<":  "__lshift__",
            ">>":  "__rshift__",
            ">>>": "__fill_rshift__",
            "|":   "__or__",
        },

        RBinaryOperators: {
            "+":   "__radd__",
            "-":   "__rsub__",
            "*":   "__rmul__",
            "/":   "__rdiv__",
            "%":   "__rmod__",
            "**":  "__rpow__",
        },

        UnaryOperators: {
            "~": "__not",
        }, 

    }

    let ops = walkAST.ReplaceOperatorFunction;
    let BinaryExpression = walkAST.UpdateNodes.BinaryExpression;
    walkAST.UpdateNodes.BinaryExpression = function (node) {
        let length = BinaryExpression.call(this, node);
        
        let binaryOperator = ops.BinaryOperators[node.operator];
        let rbinaryOperator = ops.RBinaryOperators[node.operator];
        let left = this.code.slice(node.left.start, node.left.end); 
        let right = this.code.slice(node.right.start, node.right.end); 
        if( binaryOperator === undefined ) { return length; }

        let res, offset;
        if( node.left.type === "Literal" && node.right.type === "Literal" ) {
            res = '(' + left + ' ' + node.operator + ' ' + right + ')';
        } else if( node.left.type === "Literal") {
            res = right + '.' + rbinaryOperator + '(' + left + ')';
        } else {
            res = left + '.' + binaryOperator + '(' + right + ')';
        }

        offset = this.replaceCode( node, res );
        return length + offset;
    }

    let UnaryExpression = walkAST.UpdateNodes.UnaryExpression;
    walkAST.UpdateNodes.UnaryExpression = function (node) {
        let length = UnaryExpression.call(this, node);
        
        let unaryOperator = ops.UnaryOperators[node.operator];
        let argument = this.code.slice(node.argument.start, node.argument.end); 
        if( unaryOperator === undefined ) { return length; }

        let res, offset;
        if( node.argument.type === "Literal") {
            res = '(' + argument + ').' + unaryOperator + '()';
        } else {
            res = 'SupportBasOp.' + unaryOperator + '(' + argument + ')'
        }

        offset = this.replaceCode( node, res );
        return length + offset;
    },

    walkAST.UpdateNodes = UpdateNodes;
}


module.exports = {
    updateAcorn,
    updateWalkAST,
};

