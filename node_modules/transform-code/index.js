
// DBScript - double joy script

let acorn = require('acorn');
let acornWalkAST = require('acorn-walkAST');
let fp = require('file-process');

transformPipelineOperator = require('./transform-pipeline-operator.js');
transformNumericPostfix = require('./transform-numeric-postfix.js');
transformMathOperators = require('./transform-math-operators.js');

let plugins = [ transformPipelineOperator, transformNumericPostfix, transformMathOperators ];

if( plugins.length > 0) {
    for(let i=0; i<plugins.length; i++) {
        plugins[i].updateAcorn( acorn );
        plugins[i].updateWalkAST( acornWalkAST );
    }
}

// let compile = function( code, acornOptions = {ecmaVersion: 2020} ) {
//     let AST = acorn.parse(code, acornOptions);
//     return acornWalkAST.compile( code, AST, acornWalkAST.UpdateNodes );
// };

let compile = function( code, acornOptions = {ecmaVersion: 2020} ) {
    let AST = acorn.parse(code, acornOptions);
    return acornWalkAST.compile( code, AST, acornWalkAST.UpdateNodes );
};

let compileTo = function( pathFrom, pathTo ) {
    let code = fp.readFileSync( pathFrom );
    fp. writeFile( pathTo, compile( code ));
};

module.exports = {
    compileTo
};

compileTo( 'node_modules/transform-code/test.js', 'node_modules/transform-code/test2.js' );
// console.log( compile( `
// let a=100, b=10, d=1kg;

// function func( val ) { return val * 10 }
// function okes( val ) { return val + 10 }

// c = d |> func( %% ) |> (%%*2) |> g(%% * 2 - 20) |> Ñ€(%%); 
// `));
























